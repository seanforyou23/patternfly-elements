<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Theme on PatternFly Elements</title>
    <link>https://www.patternfly.org/patternfly-elements/tags/theme/</link>
    <description>Recent content in Theme on PatternFly Elements</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://www.patternfly.org/patternfly-elements/tags/theme/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Colors</title>
      <link>https://www.patternfly.org/patternfly-elements/theme/color-palette/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.patternfly.org/patternfly-elements/theme/color-palette/</guid>
      <description>Skip to this page if you are looking for a list of all the system variables.
Color Theory Text &amp;amp; links Text and links are the most fundamental pieces of any web property, so they have their own variables aside from other UI elements. They also respond to context, such as a bit of text in a dark gray card would need to change to white. Or a link in a dark gray card would need to become a lighter shade of blue.</description>
    </item>
    
    <item>
      <title>Development Overview</title>
      <link>https://www.patternfly.org/patternfly-elements/develop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.patternfly.org/patternfly-elements/develop/</guid>
      <description>The PatternFly Elements pattern library Before getting started, it&amp;rsquo;s important to note that because this is a library, each of the components within it are designed to work together. For this reason, elements should follow some basic guidelines:
Guidelines for building a PatternFly Element  An element should be designed to be simple and easy to understand. If it seems complicated, ask:  Why is it complicated? Functionality? Content? Design?</description>
    </item>
    
    <item>
      <title>Dynamic HTML Templates</title>
      <link>https://www.patternfly.org/patternfly-elements/theme/pfe_dynamic_templates/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.patternfly.org/patternfly-elements/theme/pfe_dynamic_templates/</guid>
      <description>Attributes &amp;amp; Variables Should you need to capture information via an attribute property on your web component, such as a number, URL, or some other piece of information that does not need to be exposed to search engines, here’s how you make that happen:
// HTML using component: &amp;lt;my component how-many-bananas=&amp;quot;4&amp;quot;&amp;gt; &amp;lt;/my-component&amp;gt;  // Component javascript: get numberBananas() { **return** this.getAttribute(&amp;quot;how-many-bananas&amp;quot;); } connectedCallback() { super.connectedCallback(); this.render(); } }  // Component template can print variables as content: &amp;lt;h1&amp;gt;${this.</description>
    </item>
    
    <item>
      <title>Layouts</title>
      <link>https://www.patternfly.org/patternfly-elements/theme/pfe-layouts/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.patternfly.org/patternfly-elements/theme/pfe-layouts/</guid>
      <description>.pfe-l-grid  * { background: #e0d7ee; padding: 8px; }    Grid  Pure Grid Item Item Item Item Item  Code &amp;lt;div class=&#34;pfe-l-grid pfe-m-gutters pfe-m-all-6-col pfe-m-all-4-col-on-md pfe-m-all-3-col-on-lg&#34;&amp;gt; &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt; &amp;lt;div&amp;gt;Item&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;   Bootstrap-style Columns Default Item pfe-m-2-col pfe-m-10-col pfe-m-4-col pfe-m-4-col pfe-m-4-col pfe-m-6-col pfe-m-3-col-on-md pfe-m-6-col pfe-m-3-col-on-md pfe-m-startat-7-col-on-md pfe-m-6-col pfe-m-3-col-on-md  Code &amp;lt;div class=&#34;pfe-l-grid pfe-m-gutters&#34;&amp;gt; &amp;lt;div class=&#34;pfe-l-grid__item&#34;&amp;gt;Default Item&amp;lt;/div&amp;gt; &amp;lt;div class=&#34;pfe-l-grid__item pfe-m-2-col&#34;&amp;gt;&amp;lt;code&amp;gt;pfe-m-2-col&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&#34;pfe-l-grid__item pfe-m-10-col&#34;&amp;gt;&amp;lt;code&amp;gt;pfe-m-10-col&amp;lt;/code&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div class=&#34;pfe-l-grid__item pfe-m-4-col&#34;</description>
    </item>
    
    <item>
      <title>Theme palette</title>
      <link>https://www.patternfly.org/patternfly-elements/theme/theme-palette/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.patternfly.org/patternfly-elements/theme/theme-palette/</guid>
      <description>.color-preview { display: inline-block; width: 1em; height: 1em; vertical-align: middle; background-color: var(--bg, #fff); border: 1px solid #444; }  List of theme palette variables These variables are global hooks to override colors, fonts, spacing and more throughout the library of web components. Generally this is all you need, though component specific variables are also available. Feel free to copy this list and define the values needed for your site or application.</description>
    </item>
    
    <item>
      <title>Theming Overview</title>
      <link>https://www.patternfly.org/patternfly-elements/theme/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.patternfly.org/patternfly-elements/theme/</guid>
      <description>Theming 101 Every PatternFly Element is built to automatically utilize the colors defined in the palette, which you control! Generally speaking, the only thing you will need to do is re-define the CSS variables to match your brand and you&amp;rsquo;re done.
Often components will make decisions about how to best utilize those colors, which is &amp;ldquo;baked in&amp;rdquo;. For example, a standard CTA, or call-to-action component, uses the standard link color in its default state.</description>
    </item>
    
    <item>
      <title>Theming Slots</title>
      <link>https://www.patternfly.org/patternfly-elements/theme/pfe-theme-slots/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.patternfly.org/patternfly-elements/theme/pfe-theme-slots/</guid>
      <description>Slot basics Vocab tip: Elements that can be inserted into slots are known as slotable; when an element has been inserted in a slot, it is said to be slotted.
At first glace, there seem to be lots of &amp;ldquo;gotchas&amp;rdquo; related to web components, and a lot of documentation. Here’s a simplified guide with some basic code examples.
 Slots are places to pass content or markup into specific regions within your web component template.</description>
    </item>
    
    <item>
      <title>Writing Styles</title>
      <link>https://www.patternfly.org/patternfly-elements/theme/writing-web-component-styles/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.patternfly.org/patternfly-elements/theme/writing-web-component-styles/</guid>
      <description>Writing web component styles Theme variables &amp;amp; related functions Theme variables exist so that when a user changes a system property such as color or font-size, they see the effects of that trickle through the system to nearly every component.
Several functions exist in the pfe-sass component to make it easier to theme individual components you are building!
 Color: Rather than using only Sass variables $red or hexidecimal colors like #c00, please use the pfe-color() function along with a theme variable, i.</description>
    </item>
    
  </channel>
</rss>